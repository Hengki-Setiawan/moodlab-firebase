rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to project documents, but restricts write access to authenticated users.
     * @path /projects/{projectId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; // Example: Attempt to create a project without authentication.
     * @deny update: if true; // Example: Attempt to update a project without authentication.
     * @deny delete: if true; // Example: Attempt to delete a project without authentication.
     * @principle Allows public read access for displaying project information, but restricts write access.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts all access to contact submission documents to authenticated users.
     * @path /contactSubmissions/{contactSubmissionId}
     * @allow get, list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny get: if true; // Example: Attempt to get contact submission without authentication.
     * @deny list: if true; // Example: Attempt to list contact submissions without authentication.
     * @deny create: if true; // Example: Attempt to create a contact submission without authentication.
     * @deny update: if true; // Example: Attempt to update a contact submission without authentication.
     * @deny delete: if true; // Example: Attempt to delete a contact submission without authentication.
     * @principle Prevents unauthorized access to contact submission data.
     */
    match /contactSubmissions/{contactSubmissionId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to team member documents, but restricts write access to authenticated users.
     * @path /teamMembers/{teamMemberId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if true; // Example: Attempt to create a team member without authentication.
     * @deny update: if true; // Example: Attempt to update a team member without authentication.
     * @deny delete: if true; // Example: Attempt to delete a team member without authentication.
     * @principle Allows public read access for displaying team member information, but restricts write access.
     */
    match /teamMembers/{teamMemberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read and write their own transaction documents.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isOwner(userId);
     * @allow delete: if isOwner(userId);
     * @deny get: if request.auth.uid != userId; // Example: Attempt to get another user's transaction.
     * @deny list: if request.auth.uid != userId; // Example: Attempt to list another user's transactions.
     * @deny create: if request.auth.uid != userId; // Example: Attempt to create a transaction for another user.
     * @deny update: if request.auth.uid != userId || resource == null; // Example: Attempt to update another user's transaction, or update a non-existent transaction.
     * @deny delete: if request.auth.uid != userId || resource == null; // Example: Attempt to delete another user's transaction, or delete a non-existent transaction.
     * @principle Enforces document ownership for transaction data, allowing users to manage their own transactions.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get, list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Allow only authenticated users to access the entire users collection
    match /users/{userId} {
        allow read, write, create, update, delete: if request.auth.uid == userId;
    }
  }

  // Helper function to determine if the current user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}