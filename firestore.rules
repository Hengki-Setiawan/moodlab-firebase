/**
 * @fileoverview Firestore Security Rules for Mood Lab Website
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for certain collections (projects, team members),
 * admin-only access for sensitive data (contact submissions), and user-ownership for private data (user transactions).
 *
 * Data Structure:
 * - /projects/{projectId}: Publicly readable project data.
 * - /contactSubmissions/{contactSubmissionId}: Contact form submissions, accessible only to admins.
 * - /teamMembers/{teamMemberId}: Publicly readable team member information.
 * - /users/{userId}/transactions/{transactionId}: User-specific transaction history, only accessible to the respective user.
 *
 * Key Security Decisions:
 * - Public read access is granted to the 'projects' and 'teamMembers' collections, assuming the data is intended for public consumption.
 * - Strict user-ownership is enforced for 'transactions' data, ensuring users can only access their own transaction history.
 * - Admin-only access is enforced for 'contactSubmissions' to protect sensitive contact form data.
 * - No user listing is allowed for the 'users' collection itself.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to project data. Writes are not allowed in this prototyping phase.
     * @path /projects/{projectId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access while restricting writes for prototyping.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to contact form submissions to authenticated users (simulating admin access).
     * @path /contactSubmissions/{contactSubmissionId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny get, list: if !isSignedIn();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Enforces admin-only access to sensitive contact form data.
     */
    match /contactSubmissions/{contactSubmissionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to team member information. Writes are not allowed in this prototyping phase.
     * @path /teamMembers/{teamMemberId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access while restricting writes for prototyping.
     */
    match /teamMembers/{teamMemberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for transaction history.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isOwner(userId);
     * @deny list: if !isOwner(userId);
     * @deny create: if request.auth.uid != userId;
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}