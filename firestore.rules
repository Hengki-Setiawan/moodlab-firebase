/**
 * @fileOverview Firestore Security Rules for Mood Lab Data
 *
 * Core Philosophy: This ruleset provides public read access to project, contact submission, and team member data while restricting write access to prevent unauthorized modifications.
 *
 * Data Structure: The data is organized into three top-level collections: `/projects/{projectId}`, `/contactSubmissions/{contactSubmissionId}`, and `/teamMembers/{teamMemberId}`.
 *
 * Key Security Decisions:
 * - Public Read Access: `get` and `list` operations are allowed for all users on all collections.
 * - Restricted Write Access: `create`, `update`, and `delete` operations are denied for all users on all collections to ensure data integrity and prevent unauthorized modifications.
 * - No User Listing: Listing all users is implicitly denied, as there is no `/users` collection.
 * - No Ownership Checks: The ruleset assumes there are no owner fields on the documents and does not implement any ownership-based security measures.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to projects but restricts all write operations.
     * @path /projects/{projectId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Provides public read access while preventing unauthorized modifications.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to contact submissions but restricts all write operations.
     * @path /contactSubmissions/{contactSubmissionId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Provides public read access while preventing unauthorized modifications.
     */
    match /contactSubmissions/{contactSubmissionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to team members but restricts all write operations.
     * @path /teamMembers/{teamMemberId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Provides public read access while preventing unauthorized modifications.
     */
    match /teamMembers/{teamMemberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}