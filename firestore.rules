/**
 * @fileoverview Firestore Security Rules for Mood Lab Website
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for certain collections (projects, teamMembers),
 * strict admin-only access for sensitive data (contactSubmissions), and user-ownership for private data
 * (user transactions).
 *
 * Data Structure:
 * - /projects/{projectId}: Public project data.
 * - /contactSubmissions/{contactSubmissionId}: Contact form submissions.
 * - /teamMembers/{teamMemberId}: Team member profiles.
 * - /users/{userId}/transactions/{transactionId}: User-specific transaction data.
 *
 * Key Security Decisions:
 * - Public Read Access: The 'projects' and 'teamMembers' collections are publicly readable.
 * - Admin-Only Access: The 'contactSubmissions' collection is only accessible to admins.
 * - User-Owned Transactions: Transaction data is stored in user-specific subcollections and is only
 *   readable and writable by the respective user.
 * - No User Listing: Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 *  To simplify and optimize security rules, the `transactions` documents stores `userId` field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @returns {boolean} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the resource, implying the document exists.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @returns {boolean} True if the request is made by the owner, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /projects collection. Publicly readable, admin-only write.
     * @path /projects/{projectId}
     * @allow (get, list) Anyone can read project data.
     * @allow (create) An admin can create a new project.
     * @deny (create) A non-admin user cannot create a project.
     * @deny (update) A non-admin user cannot update a project.
     * @deny (delete) A non-admin user cannot delete a project.
     * @principle Allows public reads and restricts writes to admins.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if false; // TODO: Implement admin check
      allow update: if false; // TODO: Implement admin check
      allow delete: if false; // TODO: Implement admin check
    }

    /**
     * @description Rules for the /contactSubmissions collection. Admin-only read and write.
     * @path /contactSubmissions/{contactSubmissionId}
     * @allow (create) An admin can create a new contact submission.
     * @allow (get) An admin can read contact submission data.
     * @allow (list) An admin can list contact submissions.
     * @deny (create) A non-admin user cannot create a contact submission.
     * @deny (update) A non-admin user cannot update a contact submission.
     * @deny (delete) A non-admin user cannot delete a contact submission.
     * @principle Restricts all access to admins.
     */
    match /contactSubmissions/{contactSubmissionId} {
      allow get, list: if false; // TODO: Implement admin check
      allow create: if false; // TODO: Implement admin check
      allow update: if false; // TODO: Implement admin check
      allow delete: if false; // TODO: Implement admin check
    }

    /**
     * @description Rules for the /teamMembers collection. Publicly readable, admin-only write.
     * @path /teamMembers/{teamMemberId}
     * @allow (get, list) Anyone can read team member data.
     * @allow (create) An admin can create a new team member.
     * @deny (create) A non-admin user cannot create a team member.
     * @deny (update) A non-admin user cannot update a team member.
     * @deny (delete) A non-admin user cannot delete a team member.
     * @principle Allows public reads and restricts writes to admins.
     */
    match /teamMembers/{teamMemberId} {
      allow get, list: if true;
      allow create: if false; // TODO: Implement admin check
      allow update: if false; // TODO: Implement admin check
      allow delete: if false; // TODO: Implement admin check
    }

    /**
     * @description Rules for the /users/{userId}/transactions collection. Readable only by the user.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) A user can create a transaction with their user ID.
     * @allow (get) A user can read their own transaction data.
     * @allow (list) A user can list their own transaction data.
     * @deny (create) A user cannot create a transaction for another user.
     * @deny (update) A user cannot update another user's transaction.
     * @deny (delete) A user cannot delete another user's transaction.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}