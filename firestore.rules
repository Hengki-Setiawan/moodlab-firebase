/**
 * @fileoverview Firestore Security Rules for Mood Lab.
 *
 * Core Philosophy: This ruleset provides public read access to all collections
 * (`/projects`, `/contactSubmissions`, `/teamMembers`, `/products`)
 * and restricts write access to prevent unauthorized data modification.
 *
 * Data Structure: The database consists of four top-level collections.  There
 * are no subcollections or user-specific data trees in this initial schema.
 *
 * Key Security Decisions:
 * - Public read access is granted to all collections to allow the Mood Lab website
 *   to display project portfolios, team member information, and product details.
 * - All write operations are explicitly denied to prevent unauthorized data changes.
 *   Future iterations may introduce authentication and role-based access control for
 *   content management.
 * - Denormalization is not required because access control is not based on
 *   hierarchical data or user relationships.
 *
 * Note: These rules are for prototyping purposes and do not include any
 * authentication or authorization checks for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to project data and denies all write access.
     * @path /projects/{projectId}
     * @allow (get, list) Anyone can read project data.
     * @deny (create, update, delete) No one can create, update, or delete project data.
     * @principle Public read, restricted writes for project portfolios.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to contact submission data and denies all write access.
     * @path /contactSubmissions/{contactSubmissionId}
     * @allow (get, list) Anyone can read contact submission data.
     * @deny (create, update, delete) No one can create, update, or delete contact submission data.
     * @principle Public read, restricted writes for contact form submissions.
     */
    match /contactSubmissions/{contactSubmissionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to team member data and denies all write access.
     * @path /teamMembers/{teamMemberId}
     * @allow (get, list) Anyone can read team member data.
     * @deny (create, update, delete) No one can create, update, or delete team member data.
     * @principle Public read, restricted writes for team member profiles.
     */
    match /teamMembers/{teamMemberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product data and denies all write access.
     * @path /products/{productId}
     * @allow (get, list) Anyone can read product data.
     * @deny (create, update, delete) No one can create, update, or delete product data.
     * @principle Public read, restricted writes for product listings.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}