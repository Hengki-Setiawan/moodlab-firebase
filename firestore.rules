/**
 * @fileoverview Firestore Security Rules for Mood Lab Website
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for certain collections (projects, teamMembers),
 * admin-only access for sensitive data (contactSubmissions), and strict user-ownership for private data
 * (user transactions).
 *
 * Data Structure:
 * - /projects/{projectId}: Publicly readable project information.
 * - /contactSubmissions/{contactSubmissionId}: Contact form submissions (admin-only).
 * - /teamMembers/{teamMemberId}: Publicly readable team member information.
 * - /users/{userId}/transactions/{transactionId}: Transaction history for each user (owner-only).
 *
 * Key Security Decisions:
 * - Projects and team members are publicly readable to showcase the website's portfolio and team.
 * - Contact submissions are restricted to admin-only access to protect user privacy.
 * - User transaction data is strictly controlled, allowing only the owning user to access their own data.
 * - No user listing is allowed; access to user documents is only possible with a known user ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to projects, but restricts write access to administrators.
     * @path /projects/{projectId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access but no write access.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to contact submissions to administrators only.
     * @path /contactSubmissions/{contactSubmissionId}
     * @allow get: if false;
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Restricts all access to the collection.
     */
    match /contactSubmissions/{contactSubmissionId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to team members, but restricts write access to administrators.
     * @path /teamMembers/{teamMemberId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access but no write access.
     */
    match /teamMembers/{teamMemberId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for transaction data, allowing each user to only access their own transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isSignedIn() && isOwner(userId) && resource != null;
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}