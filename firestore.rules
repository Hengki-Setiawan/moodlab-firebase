/**
 * @fileOverview Firestore Security Rules for the Mood Lab website.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. Some collections are publicly readable (e.g., 'projects', 'teamMembers'), while others are strictly access-controlled based on user ownership ('/users/{userId}/transactions') or are admin-only ('contactSubmissions'). This design ensures that public-facing data is easily accessible, while sensitive information remains protected.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores portfolio project data.
 * - /contactSubmissions/{contactSubmissionId}: Stores contact form submissions.
 * - /teamMembers/{teamMemberId}: Stores team member profiles.
 * - /users/{userId}/transactions/{transactionId}: Stores individual user transaction histories.
 *
 * Key Security Decisions:
 * - Projects and Team Members are publicly readable but writable by authenticated users only.
 * - Contact Submissions are only accessible to authenticated users (admin-only).
 * - User transaction data is strictly private; only the owning user can access their own transaction history.
 * - Listing of contact submissions is disallowed.
 *
 * Denormalization for Authorization:
 * The `/users/{userId}/transactions` collection requires that the `userId` field within each transaction document MUST match the `{userId}` path segment. This ensures that users can only create transactions under their own user ID.
 *
 * Structural Segregation:
 * Public and private data are stored in separate collections to simplify rules and improve security. For example, project data intended for public display is stored in the top-level `/projects` collection, while user-specific transaction data is stored under the `/users/{userId}` path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to project data and restricts writes to authenticated users.
     * @path /projects/{projectId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, authenticated-only writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Restricts access to contact form submissions to authenticated users (admin-only). Listing is disallowed.
     * @path /contactSubmissions/{contactSubmissionId}
     * @allow get: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Admin-only access, no listing allowed.
     */
    match /contactSubmissions/{contactSubmissionId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants public read access to team member data and restricts writes to authenticated users.
     * @path /teamMembers/{teamMemberId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, authenticated-only writes.
     */
    match /teamMembers/{teamMemberId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Enforces strict user-ownership for transaction data.  Only the user who owns the transaction can read or write it.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces document ownership for all operations, validates relational integrity.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}