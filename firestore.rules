/**
 * @fileOverview Firestore Security Rules for Mood Lab.
 *
 * Core Philosophy:
 * This ruleset provides open read access to the `projects`, `contactSubmissions`, `teamMembers`, and `products` collections,
 * while restricting write access to prevent unauthorized data modification.
 *
 * Data Structure:
 * The Firestore database consists of four top-level collections: `projects`, `contactSubmissions`, `teamMembers`, and `products`.
 * Each collection stores documents representing portfolio projects, contact form submissions, team member data, and digital product data, respectively.
 *
 * Key Security Decisions:
 * - Read access is public for all collections to facilitate easy data retrieval for website display.
 * - Write access is denied across all collections to ensure data integrity and prevent unauthorized modifications.
 * - No user-specific data or ownership is enforced in these rules, as the collections are intended to be publicly readable and not user-dependent.
 * - The rules explicitly deny write operations to prevent accidental or malicious data changes.
 *
 * Denormalization for Authorization: Not applicable, as all collections have the same public read / restricted write posture.
 * Structural Segregation: Not applicable, as there's no mixing of public and private data within the same collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read project data, but restricts all write access.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can retrieve project data.
     * @deny (create, update, delete) - No one can create, update, or delete project data.
     * @principle Allows public read access while preventing unauthorized data modification.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read contact submissions, but restricts all write access.
     * @path /contactSubmissions/{contactSubmissionId}
     * @allow (get, list) - Any user can retrieve contact submissions.
     * @deny (create, update, delete) - No one can create, update, or delete contact submissions.
     * @principle Allows public read access while preventing unauthorized data modification.
     */
    match /contactSubmissions/{contactSubmissionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read team member data, but restricts all write access.
     * @path /teamMembers/{teamMemberId}
     * @allow (get, list) - Any user can retrieve team member data.
     * @deny (create, update, delete) - No one can create, update, or delete team member data.
     * @principle Allows public read access while preventing unauthorized data modification.
     */
    match /teamMembers/{teamMemberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read product data, but restricts all write access.
     * @path /products/{productId}
     * @allow (get, list) - Any user can retrieve product data.
     * @deny (create, update, delete) - No one can create, update, or delete product data.
     * @principle Allows public read access while preventing unauthorized data modification.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}