/**
 * @fileoverview Firestore Security Rules for Mood Lab Website
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for general content (projects, team members) and strict user-ownership for private data (user transactions).
 * Administrative access is required for managing sensitive data like contact submissions.
 *
 * Data Structure:
 * - /projects/{projectId}: Publicly accessible project information.
 * - /contactSubmissions/{contactSubmissionId}: Contact form submissions, restricted to admin access.
 * - /teamMembers/{teamMemberId}: Publicly accessible team member information.
 * - /users/{userId}/transactions/{transactionId}: User-specific transaction history.
 *
 * Key Security Decisions:
 * - Public read access is granted to the 'projects' and 'teamMembers' collections to allow open listing of project and team member data.
 * - Strict ownership is enforced for user transactions, ensuring that only the authenticated user can access their own transaction data.
 * - Administrative access is required for managing contact submissions to protect sensitive information.  No roles are defined in the data model for now, so this is placeholder.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to project data, but restricts write access to owners only.
     * @path /projects/{projectId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public reads but restricts writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if false; // CRITICAL: No owner field defined.
      allow update: if false; // CRITICAL: No owner field defined.
      allow delete: if false; // CRITICAL: No owner field defined.
    }

    /**
     * @description Restricts access to contact submissions to authenticated users only.
     * @path /contactSubmissions/{contactSubmissionId}
     * @allow get: if false;
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Restricts access to admin users only.
     */
    match /contactSubmissions/{contactSubmissionId} {
      allow get, list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to team member data, but restricts write access to owners only.
     * @path /teamMembers/{teamMemberId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public reads but restricts writes.
     */
    match /teamMembers/{teamMemberId} {
      allow get, list: if true;
      allow create: if false;  // CRITICAL: No owner field defined.
      allow update: if false; // CRITICAL: No owner field defined.
      allow delete: if false; // CRITICAL: No owner field defined.
    }

    /**
     * @description Allows a user to read and write their own transaction data.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && request.resource.data.userId == userId;
     * @allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @principle Enforces document ownership for writes, ensures only the owner can read.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}