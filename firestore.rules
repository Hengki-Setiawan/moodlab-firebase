/**
 * @file Firestore Security Rules for Mood Lab Website
 *
 * @core_philosophy This ruleset enforces a combination of public read access,
 *                  admin-only write access, and user-ownership for private data.
 *                  It prioritizes a secure-by-default posture, explicitly denying
 *                  access where not explicitly granted.
 *
 * @data_structure
 *   - /projects/{projectId}: Publicly readable projects.
 *   - /contactSubmissions/{contactSubmissionId}: Contact form submissions, admin-only.
 *   - /teamMembers/{teamMemberId}: Publicly readable team member profiles.
 *   - /users/{userId}/transactions/{transactionId}: User-specific transaction history.
 *
 * @key_security_decisions
 *   - Public read access for projects and team members to allow easy display on the website.
 *   - Strict admin-only access for contact submissions to protect sensitive data.
 *   - User-ownership enforced for transaction history, ensuring privacy.
 *   - No user listing is allowed to prevent enumeration.
 *
 * @denormalization_for_authorization Not applicable in this version.
 * @structural_segregation The data is structurally segregated into separate collections
 *                        based on access control requirements.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to projects and restricts write access to admins.
     * @path /projects/{projectId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public reads, requires admin role for writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation.
    }

    /**
     * @description Restricts access to contact submissions to admins only.
     * @path /contactSubmissions/{contactSubmissionId}
     * @allow get: if false;
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Enforces admin-only access for sensitive contact data.
     */
    match /contactSubmissions/{contactSubmissionId} {
      allow get, list, create, update, delete: if false; // TODO: Add admin role validation.
    }

    /**
     * @description Grants public read access to team member profiles and restricts write access to admins.
     * @path /teamMembers/{teamMemberId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public reads, requires admin role for writes.
     */
    match /teamMembers/{teamMemberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation.
    }

    /**
     * @description Restricts access to a user's transaction history to the user themselves.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces user-ownership for private transaction data.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get, list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @returns {boolean} - True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the resource.
     * @param {string} userId - The user ID to compare with the resource's data and the request's authentication UID.
     * @returns {boolean} - True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

  }
}