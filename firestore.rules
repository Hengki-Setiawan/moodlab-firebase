/**
 * @fileoverview Firestore Security Rules for Mood Lab Website
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for certain collections (projects, team members),
 * admin-only access for sensitive data (contact submissions), and user-ownership for private data (user transactions).
 *
 * Data Structure:
 * - /projects/{projectId}: Publicly readable projects.
 * - /contactSubmissions/{contactSubmissionId}: Contact form submissions, restricted to admins.
 * - /teamMembers/{teamMemberId}: Publicly readable team member profiles.
 * - /users/{userId}/transactions/{transactionId}: User-specific transaction history, readable only by the user.
 *
 * Key Security Decisions:
 * - Publicly readable collections (projects, team members) are intended for general display. Writes are restricted.
 * - Contact submissions are highly sensitive and are therefore only accessible to authorized admins.
 * - User transactions are private and can only be accessed by the user who owns them.
 *
 * Denormalization for Authorization:
 * - The `Transaction` documents nested under `/users/{userId}` MUST contain a `userId` field equal to the parent path's `userId`. This is validated on create and enforced as immutable on update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to projects, but restricts write access.
     * @path /projects/{projectId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, restricted write.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to contact submissions to authenticated users only.
     * @path /contactSubmissions/{contactSubmissionId}
     * @allow get: if false;
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Admin-only access.
     */
    match /contactSubmissions/{contactSubmissionId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to team members, but restricts write access.
     * @path /teamMembers/{teamMemberId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, restricted write.
     */
    match /teamMembers/{teamMemberId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to a user's transactions only to the user themselves.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && (request.resource.data.userId == resource.data.userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && (request.resource.data.userId == resource.data.userId);
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user ID matches the authenticated user's ID and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}